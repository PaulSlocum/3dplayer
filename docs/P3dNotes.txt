--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------


TODO:
~   -   ~   -   ~   -   ~   -   
- move light back to avoid objects moving out of light, but also adjust light's shadow camera to avoid 
- fix audio start on mobile
~   -   ~   -   ~   -   ~   -   
- get seek buttons working
- make it possible to set 3D model from script call
- build alternate blender model to decide which direction to go with the design
~   -   ~   -   ~   -   ~   -   


DONE:
~   -   ~   -   ~   -   ~   -   
x Fix issue where pressing "Next" quickly after pressing "Play" breaks audio system
x fix issue with particles overlapping CD player model on mobile
~   -   ~   -   ~   -   ~   -   


--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------


BUTTONS AND BUTTON LAYOUT PLANNING:

stop (maybe)
power (maybe)
open/close (maybe, also maybe separate buttons)
fastForward (maybe)
rewind (maybe)
play
pause
next
prev
repeatTrack
repeatAlbum
shuffle (maybe)

SLIDERS:
songPosition
bass
treble
volume (maybe)

DISPLAYS:
track/status (open/stop/play/pause)
trackTime
FFT display
multi-track display

OTHER:
cdTray (maybe)

BUTTON LAYOUT:
--------------------------------------------------------------------------------------
       TRACK        TIME                  FFT
       
 PLAY    PAUSE    REPEAT1  REPEATA       TREB+  TREB-
 PREV     NEXT    DISPSEL  PEAK          BASS+  BASS-
 REW      FF                             VOL+   VOL-    
 
                                       OPEN   STANDBY 
---------------------------------------------------------------------------------------


--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------


CASES AND ACTIONS TO CONSIDER:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-PLAYBACK CONTROLS (Play/Pause/Prev/Next/FF/Rew/Standby(stop))
-PLAYBACK SETTINGS (Repeat 1/Repeat A)
-SOUND CONTROLS (Treb/Bass/Vol)
-DISPLAY CONTROLS (Disp Sel/Peak)
-TRAY CONTROLS (Open/Close)
~    -     ~    -     ~    -     
-SOUND CONTROL DISPLAY (Show settings momentarily on FFT screen? ...or use individual LED strips above/below buttons?)
-TRAY ANIMATION AND CONTROL
-LED indicators next to buttons




--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------

GOOD REFERENCE PROJECT -- WebGL turntables with pitch control:

https://github.com/cwilso/wubwubwub



--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------


WEB AUDIO GOTHCAS

from https://github.com/Jam3/web-audio-player#webaudio-gotchas

There are currently a lot of challenges with cross-platform WebAudio playback. This is likely to change soon as vendors continue fixing bugs.

- Most browsers only support a limited number of AudioContext instances; re-use them where possible.
- When using a buffer source that doesn't loop, the audio file will only be playable once! You will 
   need to create another buffer source to re-play it. This module handles this for you.
- Browsers/devices which do not support createMediaElementSource will need to download and decode 
   the entire audio file before it can be played.
- There is no means of getting progress callback for the decodeAudioData (this is in discussion)
- In iOS 9.2 Chrome (v45.0.2454.89), there is a bug where opening the app directly to the demo 
   will not play any audio. The user will need to refresh the page in order to hear audio.
- iOS Safari has a bug with sampleRate causing playback to be distorted sometimes
- To solve, use ios-safe-audio-context
- Also ensure all audio/video across your site uses the same sampleRate
- In Chrome Android, using buffer and "Add to Home Screen", you can auto-play music 
   without the need for user gesture. This is not the case with iOS "Add to Home Screen."
- In iOS Safari, the <audio> tag's load() method needs to be called; however, this just 
   causes a second (superfluous) request for the file in most other browsers.
- In Chrome, if audioElement.load() is called immediately after audioElement.play(), 
   no sound will occur until the next play() is called.
- In iOS Safari, audio playback must be triggered on a 'touchend' that isn't part of a 
   drag action. One solution is to attempt audio playback only when the distance and 
  time since 'touchstart' is less than a certain threshold; see tap-event.
- In Safari 9+, AudioContext state might default to "suspended" â€” to get around this, 
   we resume the context when play() is called
- In recent Chrome, you can't use datauri with crossOrigin: 'Anonymous'
- If multiple sources are provided to Safari and the first has an error, the browser 
   will not attempt to load any subsequent sources


-----------------------------------------------------------------------------------------


https://robert.ocallahan.org/2017/09/some-opinions-on-history-of-web-audio.html

SOME OPINIONS ON THE HISTORY OF WEB AUDIO

By Robert O'Callahan   9/14/2017

People complain that Web Audio provides implementations of numerous canned processing features, 
but they very often don't do exactly what you want, and working around those limitations by 
writing your own audio processing code in JS is difficult or impossible.

This was an obvious pitfall from the moment the Web Audio API was proposed by Chris Rogers 
(at Google, at that time). I personally fought pretty hard in the Audio WG for an API that
 would be based on JS audio processing (with allowance for popular effects to be replaced 
 with browser-implemented modules). I invested enough to write a draft spec for my alternative 
 and implement a lot of that spec in Firefox, including Worker-based JS sample processing.

My efforts went nowhere for several reasons. My views on making JS sample manipulation a 
priority were not shared by the Audio WG. Here's my very first response to Chris Rogers' 
reveal of the Web Audio draft; you can read the resulting discussion there. The main arguments 
against prioritizing JS sample processing were that JS sample manipulation would be too slow, 
and JS GC (or other non-realtime behaviour) would make audio too glitchy. Furthermore, audio 
professionals like Chris Rogers assured me they had identified a set of primitives that would 
suffice for most use cases. Since most of the Audio WG were audio professionals and I wasn't, 
I didn't have much defense against "audio professionals say..." arguments.

The Web Audio API proceeded mostly unchanged because there wasn't anyone other than me trying 
to make significant changes. After an initial burst of interest Apple's WG participation 
declined dramatically, perhaps because they were getting Chris Rogers' Webkit implementation 
"for free" and had nothing to gain from further discussion. I begged Microsoft people to get 
involved but they never did; in this and other areas they were (are?) apparently content for 
Mozilla and Google to spend energy to thrash out a decent spec that they later implement.

However, the main reason that Web Audio was eventually standardized without major changes 
is because Google and Apple shipped it long before the spec was done. They shipped it with 
a "webkit" prefix, but they evangelized it to developers who of course started using it, and 
so pretty soon Mozilla had to cave.

Ironically, soon after Web Audio won, the "extensible Web" become a hot buzzword. Web Audio 
had a TAG review at which it was clear Web Audio was pretty much the antithesis of "extensible 
Web", but by then it was too late to do anything about it.

What could I have done better? I probably should have reduced the scope of my spec proposal 
to exclude MediaStream/HTMLMediaElement integration. But I don't think that, or anything 
else I can think of, would have changed the outcome.



--------------------------------------------------------------------------------
/\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/\/\//\/
--------------------------------------------------------------------------------


